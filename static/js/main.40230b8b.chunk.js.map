{"version":3,"sources":["components/context/WeatherContext.jsx","components/SearchField.jsx","components/NavBar.jsx","utils/index.js","components/Weather.jsx","components/Chart.js","components/DailyForecast.jsx","components/MainPage.jsx","App.js","reportWebVitals.js","index.js"],"names":["WeatherContext","createContext","API_KEY","process","WeatherProvider","props","useState","forecast","setForecast","city","setCity","url","setUrl","isError","setIsError","useEffect","a","axios","result","data","console","log","fetchData","Provider","value","handleSearchChange","e","target","handleSubmit","preventDefault","children","SearchField","useContext","onSubmit","type","name","onChange","placeholder","className","style","color","icon","faSearch","NavBar","WEATHER_ICONS","getIcon","Id","Weather","country","list","weather","main","display","alignItems","justifyContent","height","sunrise","sunset","dt","id","fontSize","Math","floor","temp","description","Chart","forecastData","setForecastData","min","setMin","max","setMax","svgRef","useRef","forecastDataElement","samples","tempMin","tempMax","j","startIndex","round","push","time","dt_txt","substr","length","idx","getForecastSamples","svg","select","current","width","document","getElementsByClassName","getClientRects","lineScaleBand","scaleBand","domain","map","sample","paddingOuter","rangeRound","xScale","scaleLinear","range","yScale","xAxis","axisBottom","call","line1","line","x","y","area1","area","y0","y1","getElementById","childElementCount","selectAll","remove","attr","transition","join","raise","enter","append","d","text","ref","DailyForecast","forecastList","i","date","rain","pop","humid","humidity","today","Date","getDay","week","MainPage","undefined","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.40230b8b.chunk.js","sourcesContent":["import React, { useState, useEffect, createContext } from 'react';\nimport axios from 'axios';\n\nexport const WeatherContext = createContext();\n\nconst API_KEY = process.env.REACT_APP_WEATHER_API_KEY;\n\nexport const WeatherProvider = (props) => {\n    const [forecast, setForecast] = useState([]);\n    const [city, setCity] = useState('');\n    const [url, setUrl] = useState(\n        `https://api.openweathermap.org/data/2.5/forecast?q=vancouver&appid=${API_KEY}`\n    );\n    const [isError, setIsError] = useState(false);\n\n    useEffect(() => {\n        const fetchData = async () => {\n            setIsError(false);\n            try {\n                const result = await axios(url);\n                setForecast(result.data);\n            } catch (error) {\n                setIsError(true);\n                console.log(\"error: \", error);\n            }\n        }\n        fetchData();\n    }, [url])\n\n    const handleSearchChange = (e) => {\n        setCity(e.target.value);\n    }\n\n    const handleSubmit = (e) => {\n        setUrl(`https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${API_KEY}`);\n        e.preventDefault();\n    }\n\n    return (\n        <WeatherContext.Provider\n            value={{\n                city,\n                forecast,\n                isError,\n                handleSearchChange,\n                handleSubmit,\n            }}\n        >\n            {props.children}\n        </WeatherContext.Provider>\n    )\n}\n","import React, { useContext } from 'react';\nimport { WeatherContext } from './context/WeatherContext';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\n\nconst SearchField = () => {\n    const { handleSubmit, handleSearchChange, city} = useContext(WeatherContext);\n\n    return (\n        <div>\n            <form onSubmit={handleSubmit}>\n                <input\n                    type=\"text\"\n                    name=\"city\"\n                    value={city}\n                    onChange={handleSearchChange}\n                    placeholder=\"Search City...\"\n                    className=\"search-input\"\n                />\n                <button className=\"search-btn\">\n                    <FontAwesomeIcon style={{ color: 'white' }} icon={faSearch} />\n                </button>\n            </form>\n        </div>\n    );\n}\n\nexport default SearchField;\n","import React from 'react';\nimport SearchField from './SearchField';\n\nconst NavBar = () => {\n    return (\n        <div className=\"nav-bar\">\n            <SearchField />\n        </div>\n    );\n}\n\nexport default NavBar;\n","\nexport const WEATHER_ICONS = {\n    Thunderstorm: \"wi-thunderstorm\",\n    Drizzle: \"wi-sleet\",\n    Rain: \"wi-rain\",\n    Snow: \"wi-snow\",\n    Atmosphere: \"wi-fog\",\n    Clear: \"wi-day-sunny\",\n    Clouds: \"wi-cloud\",\n    ClearNight: \"wi-night-clear\",\n    CloudyNight: \"wi-night-alt-cloudy\",\n    FoggyNight: \"wi-night-fog\",\n    SonwyNight: \"wi-night-snow\",\n    RainyNight: \"wi-night-rain\",\n    DrizzleNight: \"wi-night-showers\",\n    ThunderstormNight: \"wi-night-thunderstorm\"\n}\n\nexport const getIcon = (Id) => {\nlet icon ;\n    if (Id >= 200 && Id < 232) {\n    icon = WEATHER_ICONS.Thunderstorm\n    } else if (Id >= 300 && Id <= 321) {\n    icon = WEATHER_ICONS.Thunderstorm\n    } else if (Id >= 500 && Id <= 521) {\n    icon = WEATHER_ICONS.Rain\n    } else if (Id >= 600 && Id <= 622) {\n    icon = WEATHER_ICONS.Snow\n    } else if (Id >= 701 && Id <= 781) {\n    icon = WEATHER_ICONS.Atmosphere\n    } else if (Id === 800) {\n    icon = WEATHER_ICONS.Clear\n    } else if (Id >= 801 && Id <= 804) {\n    icon = WEATHER_ICONS.Clouds\n    }\n\nreturn icon\n}\n","import React, { useContext } from 'react';\nimport { WeatherContext } from './context/WeatherContext';\nimport { WEATHER_ICONS } from '../utils';\nimport '../App.css';\n\nconst Weather = () => {\n    const { forecast } = useContext(WeatherContext);\n\n    const getIcon = (Id) => {\n        let icon;\n        const sunrise = forecast.city.sunrise;\n        const sunset = forecast.city.sunset;\n        const dt = forecast.list[0].dt;\n        if (Id >= 200 && Id < 232) {\n            if (sunset < dt || dt <= sunrise) {\n                icon = WEATHER_ICONS.ThunderstormNight;\n            } else {\n                icon = WEATHER_ICONS.Thunderstorm;\n            }\n        } else if (Id >= 300 && Id <= 321) {\n            if (sunset < dt || dt <= sunrise) {\n                icon = WEATHER_ICONS.DrizzleNight;\n            } else {\n                icon = WEATHER_ICONS.Drizzle;\n            }\n        } else if (Id >= 500 && Id <= 521) {\n            if (sunset < dt || dt <= sunrise) {\n                icon = WEATHER_ICONS.RainyNight;\n            } else {\n                icon = WEATHER_ICONS.Rain;\n            }\n        } else if (Id >= 600 && Id <= 622) {\n            if (sunset < dt || dt <= sunrise) {\n                icon = WEATHER_ICONS.SonwyNight;\n            } else {\n                icon = WEATHER_ICONS.Snow;\n            }\n        } else if (Id >= 701 && Id <= 781) {\n            if (sunset < dt || dt <= sunrise) {\n                icon = WEATHER_ICONS.FoggyNight;\n            } else {\n                icon = WEATHER_ICONS.Atmosphere;\n            }\n        } else if (Id === 800) {\n            if (sunset < dt || dt <= sunrise) {\n                icon = WEATHER_ICONS.ClearNight;\n            } else {\n                icon = WEATHER_ICONS.Clear;\n            }\n        } else if (Id >= 801 && Id <= 804) {\n            if (sunset < dt || dt <= sunrise) {\n                icon = WEATHER_ICONS.CloudyNight;\n            } else {\n                icon = WEATHER_ICONS.Clouds;\n            }\n        }\n        return icon\n    }\n\n    return (\n        <div className=\"content-container\">\n                <div>\n                    <h1>{forecast.city.name}, {forecast.city.country}</h1>\n                    <h3>{forecast.list[0].weather[0].main}</h3>\n                    <div style={{ display: 'flex', alignItems: 'center', justifyContent: 'center', height: 80 }}>\n                        <div>\n                            <p><i className={`wi ${getIcon(forecast.list[0].weather[0].id)}`} style={{fontSize: 80}}></i></p>\n                        </div>\n                        <div>\n                            <h1 style={{fontSize: 50}}>{Math.floor(forecast.list[0].main.temp-273.15)}°</h1>\n                        </div>\n                    </div>\n                    {/*<div style={{ display: 'flex' , justifyContent: 'space-evenly', height: 50}}>\n                        <h4>H: {Math.floor(weather.main.temp_max-273.15)}°</h4>\n                        <h4>L: {Math.floor(weather.main.temp_min-273.15)}°</h4>\n    </div>*/}\n                    <h3>{forecast.list[0].weather[0].description} currently.</h3>\n                </div>\n        </div>\n    );\n}\n\nexport default Weather;\n","import React, { useRef, useEffect, useState, useContext } from 'react';\nimport { select, line, scaleLinear, scaleBand, axisBottom, area } from 'd3';\nimport { WeatherContext } from './context/WeatherContext';\nimport '../App.css';\n\nconst Chart = () => {\n    const { forecast } = useContext(WeatherContext);\n    const [forecastData, setForecastData] = useState([]);\n    const [min, setMin] = useState(99); // min value on line graph\n    const [max, setMax] = useState(-99); // max value on line graph\n    const svgRef = useRef();\n    const NrOfSamples = 8;\n\n    const getForecastSamples = () => {\n        let forecastDataElement = forecast.list[0];\n        let samples = [];\n        let tempMin = 99;\n        let tempMax = -99;\n        let startIndex;\n\n        startIndex = 0;\n\n        for(let j = startIndex; j < startIndex + NrOfSamples; j++) {\n            forecastDataElement = forecast.list[j];\n\n            tempMax = forecastDataElement.main.temp-273 > tempMax ? Math.round(forecastDataElement.main.temp-273) : tempMax;\n            tempMin = forecastDataElement.main.temp - 273 < tempMin ? Math.round(forecastDataElement.main.temp - 273) : tempMin;\n\n            samples.push(\n            {\n                temp: forecastDataElement.main.temp-273,\n                time: forecastDataElement.dt_txt.substr(forecastDataElement.dt_txt.length-8, forecastDataElement.dt_txt.length).substr(0,5),\n                icon: forecastDataElement.weather[0].icon,\n                idx: j-startIndex\n            } )\n        }\n\n        setForecastData(samples);\n        setMin(tempMin-2);\n        setMax(tempMax+2);\n    }\n\n    useEffect(() => {\n        getForecastSamples();\n    }, [forecast])\n\n    useEffect(() => {\n        const svg = select(svgRef.current);\n        const width = document.getElementsByClassName(\"svg\")[0].getClientRects()[0].width;\n        const height = document.getElementsByClassName(\"svg\")[0].getClientRects()[0].height;\n\n        const lineScaleBand = scaleBand()\n        .domain(forecastData.map(sample => {return sample.time}))\n        .paddingOuter(-0.55)\n        .rangeRound([0,width])\n\n        const xScale = scaleLinear()\n            .domain([0, forecastData.length - 1])\n            .range([0, width]); // map to value (svg pixel length)\n\n        const yScale = scaleLinear()\n            .domain([min-273,max-273])\n            .range([height, 0]); // map to value (svg pixel height)\n\n        const xAxis = axisBottom(lineScaleBand);\n\n        svg\n            .select('.x-axis')\n            .style('transform', `translateY(${height}px)`)\n            .call(xAxis);\n\n        const line1 = line()\n            .x((value, idx) => xScale(idx))\n            .y(yScale); // origin of svg is top left (y-val 0)\n\n        const area1 = area()\n            .x((value, idx) => xScale(idx))\n            .y0(height)\n            .y1(yScale);\n\n        if(document.getElementById(\"tg\").childElementCount === NrOfSamples) {\n            svg\n            .select('.text-group')\n            .selectAll('text')\n            .remove();\n        }\n\n        if(document.getElementById(\"icons\").childElementCount === NrOfSamples) {\n            svg\n            .select('.icon-group')\n            .selectAll('image')\n            .remove();\n        }\n\n        // add the area under line\n        svg\n            .selectAll('path')\n            .data([forecastData.map(forecastDataElement => Math.round(forecastDataElement.temp-273))])\n            .attr('class', 'area')\n            .style('transform', `translateY(-${height}px)`)\n            .transition()\n            .attr('d', area1)\n            .attr('fill', '#f3e98e')\n            .attr('stroke', 'none');\n\n        // Add the line\n        svg\n            .selectAll('.line')\n            .data([forecastData.map(forecastDataElement => Math.round(forecastDataElement.temp-273))])\n            .join('path')\n            .attr('class', 'line')\n            .transition()\n            .attr('d', line1)\n            .attr('fill', 'none')\n            .attr('stroke', '#f5e133')\n            .attr('stroke-width', '5');\n\n        // add temp string above line\n        svg\n            .select('.text-group')\n            .raise()\n            .selectAll('text')\n            .data(forecastData)\n            .enter()\n            .append(\"text\")\n            .attr('class', 'text')\n            .transition()\n            .attr(\"x\", d => d.idx*(width/(NrOfSamples-1)-1.5))\n            .attr(\"y\", d => Math.round(height-((Math.round(d.temp)-min)*height/(max-min))-12))\n            .text(d => `${Math.round(d.temp)}°` );\n\n        // add weather icons\n        svg\n            .select('.icon-group')\n            .raise()\n            .selectAll('image')\n            .data(forecastData)\n            .enter()\n            .append('image')\n            .attr(\"href\", d => `http://openweathermap.org/img/wn/${d.icon}@2x.png`)\n            .attr(\"class\", \"icon\")\n            .attr(\"alt\", \" \")\n            .attr(\"height\", \"50\")\n            .attr(\"width\", \"50\")\n            .style('transform', `translateX(-${width/(NrOfSamples-1)-2.5}px)`)\n            .attr(\"x\", d => d.idx*(width/(NrOfSamples-1)))\n            .attr(\"y\", height+20) // offset icons down\n\n    }, [forecastData])\n\n\n    return (\n        <div className=\"content-container\">\n            <div id=\"parent\" className=\"center-container\">\n                <svg ref={svgRef} className=\"svg\">\n                <g className='x-axis' />\n                <g className='y-axis' />\n                <g className='text-group' id=\"tg\" />\n                <g className='icon-group' id=\"icons\"/>\n                </svg>\n            </div>\n        </div>\n    );\n}\n\nexport default Chart;\n","import React, { useContext } from 'react';\nimport { WeatherContext } from './context/WeatherContext';\nimport { getIcon } from '../utils';\nimport '../App.css';\n\nconst DailyForecast = (props) => {\n  const { forecast } = useContext(WeatherContext);\n  let forecastList = [];\n\n  for (var i = 0; i < forecast.list.length; i += 8) {\n    forecastList.push(\n      {\n        icon: forecast.list[i].weather[0].id,\n        date: forecast.list[i].dt_txt,\n        temp: Math.floor(forecast.list[i].main.temp - 273.15),\n        rain: Math.floor(forecast.list[i].pop*100),\n        humid: forecast.list[i].main.humidity,\n      }\n    )\n  }\n\n  const today = new Date().getDay();\n  const week = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n    return (\n        <div className=\"table-container\">\n          <h2>5 Days Forecast</h2>\n          <table className=\"table_box\">\n            <tr>\n              <th>Weather</th>\n              <th>Date</th>\n              <th>Temp (°)</th>\n              <th>Rain (%)</th>\n              <th>Humid (%)</th>\n            </tr>\n            <tr>\n              <td><i className={`wi ${getIcon(forecastList[0].icon)} icon`}></i></td>\n              <td>Today</td>\n              <td>{forecastList[0].temp}°</td>\n              <td>{forecastList[0].rain}%</td>\n              <td>{forecastList[0].humid}%</td>\n            </tr>\n            <tr>\n              <td><i className={`wi ${getIcon(forecastList[1].icon)} icon`}></i></td>\n              <td>{week[today + 1 > 6 ? today - 6 : today + 1]}</td>\n              <td>{forecastList[1].temp}°</td>\n              <td>{forecastList[1].rain}%</td>\n              <td>{forecastList[1].humid}%</td>\n            </tr>\n            <tr>\n              <td><i className={`wi ${getIcon(forecastList[2].icon)} icon`}></i></td>\n              <td>{week[today + 2 > 6 ? today - 5 : today + 2]}</td>\n              <td>{forecastList[2].temp}°</td>\n              <td>{forecastList[2].rain}%</td>\n              <td>{forecastList[2].humid}%</td>\n            </tr>\n            <tr>\n              <td><i className={`wi ${getIcon(forecastList[3].icon)} icon`}></i></td>\n              <td>{week[today+3 > 6 ? today-4: today+3]}</td>\n              <td>{forecastList[3].temp}°</td>\n              <td>{forecastList[3].rain}%</td>\n              <td>{forecastList[3].humid}%</td>\n            </tr>\n            <tr>\n              <td><i className={`wi ${getIcon(forecastList[4].icon)} icon`}></i></td>\n              <td>{week[today+4 > 6 ? today-3: today+4]}</td>\n              <td>{forecastList[4].temp}°</td>\n              <td>{forecastList[4].rain}%</td>\n              <td>{forecastList[4].humid}%</td>\n            </tr>\n          </table>\n\n        </div>\n    );\n}\n\nexport default DailyForecast;\n","import React, { useContext } from 'react';\nimport Weather from './Weather';\nimport Chart from './Chart';\nimport DailyForecast from './DailyForecast';\nimport { WeatherContext } from './context/WeatherContext';\nimport '../App.css';\n\nconst MainPage = () => {\n    const { forecast　} = useContext(WeatherContext);\n    return (\n        <div className=\"main-page\">\n\n            {/*{isError && <div>Something went to wrong ...</div>}*/}\n            {forecast.city !== undefined ? (\n                <div>\n                    <Weather />\n                    <Chart />\n                    <DailyForecast />\n                </div>\n            ) : (\n                <div className=\"spinner\"></div>\n            )}\n        </div>\n    );\n}\n\nexport default MainPage;\n","import React from 'react';\nimport NavBar from './components/NavBar';\nimport MainPage from './components/MainPage';\nimport { WeatherProvider } from './components/context/WeatherContext';\nimport './App.css';\nimport \"weather-icons/css/weather-icons.css\";\n\nfunction App() {\n  return (\n    <WeatherProvider>\n      <div className=\"App\">\n        <NavBar />\n        <MainPage />\n      </div>\n    </WeatherProvider>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}